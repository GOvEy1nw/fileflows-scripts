/**
 * @description Custom FileFlows script to check for external subtitles and process audio with Whisper if no subtitles are found.
Subtitles generated by Whisper are then processed with Subtitle Edit. User can specify subtitle extensions,
Whisper model, and language.
 * @author GOvEy1nw
 * @revision 1
 * @minimumVersion 1.0.0.0
 * @param {string} SubtitleExtensions Subtitle file extensions to check for (comma-separated, eg. .srt,.en.srt,.eng.srt)
 * @param {string} WhisperModel Whisper model to use (eg. tiny, base, small, medium, large)
 * @param {string} WhisperLanguage Language code for Whisper (eg. en, pt, jp)
 * @param {string} subProfile Profile to use for SubtitleEdit
 * @output No External Subs Found, Generate Subs
 * @output External Subs Found
 */
function Script() {
  // Parse the comma-separated subtitle extensions into an array
  let extensions = SubtitleExtensions.toString().split(',').map(ext => ext.trim());
  let baseName = Variables.file.NameNoExtension;
  let directory = Variables.folder.FullName;
  let existingSubtitles = [];

  for (let ext of extensions) {
    let subtitlePath = directory + '/' + baseName + '.' + ext;
    if (Flow.FileExists(subtitlePath)) {
      existingSubtitles.push(subtitlePath);
      Logger.ILog('Found subtitle file: ' + subtitlePath);
    }
  }

  if (existingSubtitles.length > 0) {
    Variables.subtitlesFound = true;
    Variables.existingSubtitles = existingSubtitles;
    Logger.ILog('Subtitle files found: ' + existingSubtitles.join(', '));
    // Since external subtitles are found, we do not process them with Subtitle Edit
    return 2; // Exit the script successfully
  } else {
    Variables.subtitlesFound = false;
    Logger.ILog('No subtitle files found for: ' + baseName);
  }

  // Step 2: Process audio with Whisper-Faster if no external subtitles are found
  let whisperCli = Flow.GetToolPath('WhisperFaster');
  let output = Flow.TempPath + '/' + baseName + '.srt';
  let ffoutput = Flow.TempPath;

  let whisperProcess = Flow.Execute({
    command: whisperCli,
    argumentList: [
      Variables.file.FullName,
      '-l',
      WhisperLanguage,
      '-m',
      WhisperModel,
      '--standard',
      '--max_gap',
      '1.0',
      '-o',
      ffoutput
    ]
  });

  if (whisperProcess.exitCode !== 0) {
    Logger.ELog('Failed processing Whisper-Faster: ' + whisperProcess.exitCode);
    return -1;
  }

  if (!Flow.FileExists(output)) {
    Logger.ELog('Output file does not exist from Whisper Standalone: ' + output);
    return -1;
  }

  // Set the working file to the output file that needs to be moved
  Flow.SetWorkingFile(output);

  // Step 3: Edit Subtitles with Subtitle Edit only if they have been generated by Whisper-Faster
  let subtitleEditCli = Flow.GetToolPath('SubtitleEdit');
  let subtitleFolderPath = Variables.folder.FullName;

  let subtitleProcess = Flow.Execute({
    command: subtitleEditCli,
    argumentList: [
      output,
      'subrip',
      '/MergeShortLines',
      '/BalanceLines',
      '/SplitLongLines',
      '/overwrite',
      '/outputfolder:' + subtitleFolderPath
    ]
  });

  if (subtitleProcess.exitCode !== 0) {
    Logger.ELog('Failed processing SubtitleEdit: ' + subtitleProcess.exitCode);
    if (subtitleProcess.standardError) {
      Logger.ELog('Error message: ' + subtitleProcess.standardError);
    }
    return -1;
  }

  Logger.ILog('SubtitleEdit processing completed successfully for generated subtitles.');
  
  // Update the working file in the flow to the newly moved text file
  Flow.SetWorkingFile(output);

  
  return 1;
}